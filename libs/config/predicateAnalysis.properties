#include predicateAnalysis-PredAbsRefiner-ABEl.properties

# output
# disable all default output files
# (any explicitly given file will still be written)
output.disable = false
# directory to put all output files in
output.path = output/
# base directory for all input & output files
# (except for the configuration file itself)
rootDirectory = "."

# Dump the complete configuration to a file.
# configuration.dumpFile = UsedConfiguration.properties

# print coverage info to file
coverage.export = false
# coverage.file = "coverage.info"

# write collected assumptions to file
assumptions.export = true
assumptions.file = assumptions.txt
# export automaton to file
cpa.automaton.dotExport = false
# file for saving the automaton in DOT format (%s will be replaced with
# automaton name)
cpa.automaton.dotExportFile = %s.dot
# Export one abstraction formula for each abstraction state into a file?
cpa.predicate.abstractions.export = true
# file that consists of one abstraction formula for each abstraction state
cpa.predicate.abstractions.file = abstractions.txt
# Export the weakest precondition?
cpa.predicate.precondition.export = false
# File for exporting the weakest precondition.
cpa.predicate.precondition.file = precondition.txt
# export final predicate map
cpa.predicate.predmap.export = true
# file for exporting final predicate map
cpa.predicate.predmap.file = predmap.txt
# Format for exporting predicates from precisions.
cpa.predicate.predmap.predicateFormat = SMTLIB2
# export final loop invariants
cpa.predicate.invariants.export = false
# export invariants as precision file?
cpa.predicate.invariants.exportAsPrecision = false
# file for exporting final loop invariants
cpa.predicate.invariants.file = invariants.txt
# file for precision that consists of invariants.
cpa.predicate.invariants.precisionFile = invariantPrecs.txt

# ErrorPath
# export error path to file, if one is found
# cpa.arg.errorPath.core = "ErrorPath.%d.core.txt"
cpa.arg.errorPath.enabled = true
cpa.arg.errorPath.export = true
# export one variable assignment for error path to file, if one is found
cpa.arg.errorPath.assignment = ErrorPath.%d.assignment.txt
# export error path to file as an automaton
cpa.arg.errorPath.automaton = 
# translate error path to C program
cpa.arg.errorPath.exportAsSource = true
# export error path to file, if one is found
cpa.arg.errorPath.file = ErrorPath.%d.txt
# export error path to file, if one is found
cpa.arg.errorPath.graph = 
# export error path to file as an automaton to a graphml file
cpa.arg.errorPath.graphml = 
# export error path to file, if one is found
cpa.arg.errorPath.json = 
cpa.arg.errorPath.source = ErrorPath.%d.c


# ARG
# export final ARG as .dot file
cpa.arg.export = true
cpa.arg.file = ARG.dot
# export simplified ARG that shows all refinements to .dot file
cpa.arg.refinements.file = ARGRefinements.dot
# export final ARG as .dot file, showing only loop heads and function
# entries/exits
cpa.arg.simplifiedARG.file = ARGSimplified.dot


# CFA

# export CFA as .dot file
cfa.export = true
# combine sequences of simple edges into a single edge
cfa.useMultiEdges = true
# Remove all edges which don't have any effect on the program
cfa.simplifyCfa = true
# simplify simple const expressions like 1+2
cfa.simplifyConstExpressions = true
# simplify pointer expressions like s->f to (*s).f with this option the cfa
# is simplified until at maximum one pointer is allowed for left- and
# rightHandSide
cfa.simplifyPointerExpressions = true
# export individual CFAs for function as .dot files
cfa.exportPerFunction = false
# dump a simple call graph
cfa.callgraph.export = false
# while this option is activated, before each use of a PointerExpression, or
# a dereferenced field access the expression is checked if it is 0
cfa.checkNullPointers = true
# how often can a function appear in the callstack as a clone of the original
# function?
cfa.functionCalls.recursionDepth = 5
# get an initial map of predicates from a list of files (see source
# doc/examples/predmap.txt for an example)
# cpa.predicate.abstraction.initialPredicates = []

# Simplify the abstraction formula that is stored to represent the state
# space. Helpful when debugging (formulas get smaller).
# hasError
# cpa.predicate.abstraction.simplify = false

# whether or not to do lazy-abstraction
cpa.value.refiner.doLazyAbstraction = true

# Which SMT solver to use.  [MATHSAT5, SMTINTERPOL, Z3, PRINCESS]
cpa.predicate.solver = MATHSAT5

# print warnings during analysis when uninitialized variables are used
cpa.uninitvars.printWarnings = true
  
# Handle aliasing of pointers. This adds disjunctions to the formulas, so be
# careful when using cartesian abstraction.
cpa.predicate.handlePointerAliasing = true

# Skip recursion. Treat function call as a statement (the same as for
# functions without bodies)
# Skip recursion (this is unsound). Treat function call as a statement (the
# same as for functions without bodies)
cpa.callstack.skipRecursion = false

# Skip recursion if it happens only by going via a void function (this is
# unsound).
cpa.callstack.skipVoidRecursion = false

# entry function
analysis.entryFunction = main

# which strategy to adopt for visiting states?  [DFS, BFS, RAND, RANDOM_PATH]
analysis.traversal.order = DFS

# Do not report unknown if analysis terminated, report true (UNSOUND!).
analysis.unknownAsTrue = true

# which model checker to use for verifying counterexamples as a second check
# Currently CBMC or CPAchecker with a different config can be used. values: [CBMC, CPACHECKER]
# counterexample.checker = CPACHECKER
 # configuration file for counterexample checks with CPAchecker
# counterexample.checker.config = valueAnalysis-no-cbmc.properties

# statistics
# write some statistics to disk
statistics.export = true
statistics.file = Statistics.txt
# track memory usage of JVM during runtime
statistics.memory = true
# print statistics to console
statistics.print = false

# set this to true when you only want to do a code analysis. If StatisticsCPA
# is combined with other CPAs to do queries use false.
cpa.statistics.analysis = true
# which merge operator to use for StatisticsCPA? Ignored when analysis is set
# to true [sep, join]
# cpa.statistics.mergeSep = "sep"
# count the number of traversed arithmetic operations.
cpa.statistics.metric.arithmeticOperationCount = true
# count the number of traversed variable definitions with array type.
cpa.statistics.metric.arrayVariablesCount = true
# count the number of traversed assume statements.
cpa.statistics.metric.assumeCount = true
# count the number of traversed bitwise operations.
cpa.statistics.metric.bitwiseOperationCount = true
# count the number of traversed edges with more then one outgoing edge.
cpa.statistics.metric.branchCount = true
# count the number of traversed dereference operations.
cpa.statistics.metric.dereferenceCount = true
# count the number of traversed variable definitions with floating type
# (float or double).
cpa.statistics.metric.floatVariablesCount = true
# count the number of traversed function calls.
cpa.statistics.metric.functionCallCount = true
# count the number of traversed function definitions.
cpa.statistics.metric.functionDefCount = true
# count the number of traversed global variable definitions.
cpa.statistics.metric.globalVariablesCount = true
# count the number of traversed gotos.
cpa.statistics.metric.gotoCount = true
# count the number of traversed variable definitions with integer type.
cpa.statistics.metric.integerVariablesCount = true
# count the number of traversed jumps.
cpa.statistics.metric.jumpCount = true
# count the number of traversed local variable definitions.
cpa.statistics.metric.localVariablesCount = true
# count the number of traversed loops.
cpa.statistics.metric.loopCount = true
# count the number of traversed nodes.
cpa.statistics.metric.nodeCount = true
# count the number of traversed variable definitions with pointer type.
cpa.statistics.metric.pointerVariablesCount = true
# count the number of traversed variable definitions with a complex structure
# type.
cpa.statistics.metric.structVariablesCount = true
# target file to hold the statistics
# cpa.statistics.statisticsCPAFile = no default value


# others

# comma-separated list of files with specifications that should be checked
# (see config/specification/ for examples)
# specification =""

# Match the line numbers within the origin (mapping done by preprocessor line
# markers).
spec.matchOriginLine = true

# Whether to check for memory safety properties (this can be specified by
# passing an appropriate .prp file to the -spec parameter).
memorysafety.check = false
# When checking for memory safety properties, use this configuration file
# instead of the current one.
memorysafety.config = sv-comp15--memorysafety.properties

# Limit for cpu time used by CPAchecker (use seconds or specify a unit; -1
# for infinite)
limits.time.cpu = 600s

# For C files, run the preprocessor on them before parsing. Note that all
# file numbers printed by CPAchecker will refer to the pre-processed file,
# not the original input file.
parser.usePreprocessor = false
# The command line for calling the preprocessor. May contain binary name and
# arguments, but won't be expanded by a shell. The source file name will be
# appended to this string. The preprocessor needs to print the output to
# stdout.
parser.preprocessor = cpp

# The default length for arrays when the real length cannot be determined.
cpa.predicate.defaultArrayLength = 20
# The maximum length for arrays (elements beyond this will be ignored).
cpa.predicate.maxArrayLength = 20

# use a BMC like algorithm that checks for satisfiability after the analysis
# has finished, works only with PredicateCPA
analysis.algorithm.BMC = false

# use CBMC as an external tool from CPAchecker
analysis.algorithm.CBMC = false

# use CEGAR algorithm for lazy counter-example guided analysis
# You need to specify a refiner with the cegar.refiner option.
# Currently all refiner require the use of the ARGCPA.
# analysis.algorithm.CEGAR = false

# use a predicated analysis which proves if the program satisfies a specified
# property with the help of a PredicateCPA to separate different program paths
# analysis.algorithm.predicatedAnalysis = false

# do analysis and then check if reached set fulfills property specified by
# ConfigurableProgramAnalysisWithPropertyChecker
# analysis.algorithm.propertyCheck = false

# create summary call statement edges
# analysis.summaryEdges = false

# threshold for unrolling loops of the program (0 is infinite)
# works only if assumption storage CPA is enabled, because otherwise it would
# be unsound
# cpa.loopstack.maxLoopIterations = 0

# threshold for adjusting the threshold for unrolling loops of the program (0
# is infinite).
# only relevant in combination with a non-static maximum loop iteration
# adjuster.
# cpa.loopstack.maxLoopIterationsUpperBound = 0

